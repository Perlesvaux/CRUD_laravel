0- install php & php-xml:
@bash
sudo apt update
sudo apt install php
sudo apt install php-xml
php -v  #Check version with
php -ini | grep php.ini  #Check config file with
/etc/php/8.1/cli/php.ini  #Config file location
@bashq

@bash
#Run server: go to project's directory and do:
php -S localhost:8000 
@bashq

--Alternative php installation--
Install @a XAMPP @aq  @href https://www.apachefriends.org/es/download.html @hrefq
@bash
/opt/lampp/etc/php.ini  #Config file location
#Run server:
sudo /opt/lampp/lampp start
#turn it off:
sudo /opt/lampp/lampp stop
@bashq


--Setup config file php.ini--
@php
#Un-comment following extensions:
extension=curl
extension=fileinfo
extension=gd
extension=mysqli
extension=openssl

#Enable those PDO you'll be using.
extension=pdo_firebird
extension=pdo_mysql
extension=pdo_oci
extension=pdo_odbc
extension=pdo_pgsql
extension=pdo_sqlite
@phpq

--Dependencies--
1- Installing Node and npm through nvm:
#Install nvm (Node Version Manager)
@bash
curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.5/install.sh | bash
nvm install 18
nvm use 18
@bashq

2- install composer (package manager) in current directory
go @a here @aq @href https://getcomposer.org/download/ @hrefq
...and follow CLI instructions.

You should now have a "composer.phar" on current directory.
#Add it to "~/bin/" to make it accessible from anywhere
@bash
mv composer.phar ~/bin/composer
@bashq

--Laravel--
3- create Laravel project:
@bash
php composer.phar create-project laravel/laravel example-app
@bashq
or, if you did "mv composer.phar ~/bin/composer", then:
@bash
composer create-project laravel/laravel example-app
@bashq

#After project has been created, start Laravel's local development server:
@bash
cd example-app
php artisan serve  #or ./artisan serve
@bashq

--Database config--
4- This example uses MySQL.
For most use-cases, an empty database & a single user with enough privileges will be enough
@bash
sudo apt install mysql-server
sudo mysql_secure_installation
systemctl status mysql
sudo mysql
@bashq
@sql
CREATE DATABASE databasename;
CREATE USER 'username'@'localhost' IDENTIFIED BY 'enterPasswordHere';
GRANT INSERT, SELECT, UPDATE, DELETE ON databasename.* to 'username'@'localhost';
@sqlq
New user can now access MySQL like this:
@bash
mysql -u username -p
@bashq
@sql
USE DATABASE databasename; 
@sqlq
Or, with:
@bash
mysql -h localhost -u username -p databasename
@bashq

5- now, edit the example-app/.env file.
@php
#configure database:
DB_CONNECTION=mysql
DB_HOST=127.0.0.1
DB_PORT=3306
DB_DATABASE=databasename
DB_USERNAME=username
DB_PASSWORD=PaSSword*
@phpq


6- Let's setup the model, migration and controller:
@bash
./artisan make:model profesor -mc
@bashq
This will automatically create:
-the model [app/Models/profesor.php]
-the migration [database/migrations/2023_10_19_094147_create_profesors_table.php]
-the controller [app/Http/Controllers/ProfesorController.php]

Now go to the [database/migrations/2023_10_19_094147_create_profesors_table.php]
Edit the "up()" function to include the columns you want:
@php
public function up(): void
{
Schema::create('profesors', function (Blueprint $table) {
    $table->id();
    $table->string('name');
    $table->integer('age');
    $table->timestamps(); /*if you don't want this column, pay attention to next step!*/
});
}
@phpq

Now, go to the [app/Models/profesor.php]
Right below where it says "use HasFactory", add:
@php
class profesor extends Model
{   
    use HasFactory; 

    public $timestamps = false; /*delete this line if you're okay including timestamps!*/

    protected $table = 'profesors';

    protected $fillable =[
     'name'.
     'age'
    ];
}   
@phpq

If database doesn't yet contain 'profesors' table, this command below will create it:
@bash
./artisan migrate
#or this one below to reset whole table and start over:
./artisan migrate:fresh
@bashq




./artisan make:model student

./artisan make:controller studentController















6- Common paths:
example-app/app/Http/Controllers/ #i.e.: 
example-app/routes/api.php        #i.e.: REST APIs
example-app/routes/web.php        #i.e.: MVC controller
#i.e.: it stores ".blade.php" templates rendered by the MVC controller:
example-app/resources/views/
#CSS and JavaScript files:
example-app/resources/css/
example-app/resources/js/
#i.e.: a migration is a way to define and manage database schema changes.
It's a version control system for your database.
Allowing you to modify your database's structure without directly writing SQL queries.
example-app/database/migrations/

7- Installing some dependencies
./artisan make:model Ejercito -mc;
#'ProjectController' automatically generates a set of standard CRUD
./artisan make:controller ProjectController
#'Breeze' package provides authentication scaffolding
composer require laravel/breeze --dev
./artisan breeze:install
npm run dev   #Activates authentication service.

#Create tables based on schemas defined at example-app/database/migrations/
./artisan migrate
#CAUTION:   ./artisan migrate:fresh   will drop-&-redo all tables.


#this creates a time-stamped schema under example-app/database/migrations/
./artisan make:migration create_ejercito_table
